{"version":3,"sources":["Stopwatch/Stopwatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["StopWatch","timePassed","useState","seconds","setSeconds","minutes","setMinutes","hours","setHours","useEffect","Math","floor","toString","length","App","timer","setTimer","difference","setDifference","subscription","setSubscription","prevent","setPrevent","className","onClick","unsubscribe","timerSubscription","interval","pipe","map","v","subscribe","event","timerInstance","setTimeout","clearTimeout","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA4BeA,EA1BG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACnB,EAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,WACR,IAAIF,EAAQG,KAAKC,MAAMV,EAAa,MACpCO,GAAS,kBAAmC,IAA5BD,EAAMK,WAAWC,OAAe,IAAM,IAAMN,KAE5D,IAAIF,EAAUK,KAAKC,MAAOV,EAAa,KAAQ,IAC/CK,GAAW,kBAAqC,IAA9BD,EAAQO,WAAWC,OAAe,IAAM,IAAMR,KAEhE,IAAIF,EAAUF,EAAa,GAC3BG,GAAW,kBAAqC,IAA9BD,EAAQS,WAAWC,OAAe,IAAM,IAAMV,OAC/D,CAACF,IAGF,mCACE,+BACGM,EADH,IACWF,EADX,IACqBF,QC+DZW,MA3Ef,WACE,MAA0BZ,mBAAS,GAAnC,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAAoCd,mBAAS,GAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAEA,EAAwChB,mBAAS,IAAjD,mBAAOiB,EAAP,KAAqBC,EAArB,KACA,EAA8BlB,oBAAS,GAAvC,mBAAOmB,EAAP,KAAgBC,EAAhB,KA8CA,OACE,sBAAKC,UAAU,MAAf,UACE,4CACA,uBACA,cAAC,EAAD,CAAWtB,WAAYc,GAAgBE,IACvC,gCACE,wBAAQO,QAlDS,WACrB,GAAKL,EAQHA,EAAaM,cACbT,EAAS,GACTE,EAAc,GACdE,EAAgB,QAXC,CACjB,IAAMM,EAAoBC,YAXlB,KAYLC,KAAKC,aAAI,SAACC,GAAD,OAAOA,EAAI,MACpBC,WAAU,SAACD,GACVd,EAASc,EAAIb,MAEjBG,EAAgBM,KA2CmBH,UAAU,kBAA3C,wBAGA,wBACEC,QAtCM,SAACQ,GACb,GAAIX,EAAS,CACXC,GAAW,GACX,IAAMW,EAAgBC,YAAW,WAC/BZ,GAAW,GACXa,aAAaF,KACZ,UAECd,GACFA,EAAaM,cAGfP,EAAcH,GACdK,EAAgB,KA0BZG,UAAU,kBACVa,MAAO,8BAHT,mBAOA,wBAAQZ,QA3BS,WACjBL,GACFA,EAAaM,cAGf,IAAMC,EAAoBC,YA/ChB,KA+CgCI,WAAU,SAACD,GACnDd,EAASc,MAEXV,EAAgBM,IAmBqBH,UAAU,iBAA3C,0BChEOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0f7d9c6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst StopWatch = ({ timePassed }) => {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [hours, setHours] = useState(0);\n\n  useEffect(() => {\n    let hours = Math.floor(timePassed / 3600);\n    setHours(() => (hours.toString().length === 1 ? \"0\" : \"\") + hours);\n\n    let minutes = Math.floor((timePassed % 3600) / 60);\n    setMinutes(() => (minutes.toString().length === 1 ? \"0\" : \"\") + minutes);\n\n    let seconds = timePassed % 60;\n    setSeconds(() => (seconds.toString().length === 1 ? \"0\" : \"\") + seconds);\n  }, [timePassed]);\n\n  return (\n    <>\n      <h2>\n        {hours}:{minutes}:{seconds}\n      </h2>\n    </>\n  );\n};\n\n\nexport default StopWatch;","import { useState } from \"react\";\n\nimport { interval } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport \"./App.css\";\nimport StopWatch from \"./Stopwatch/Stopwatch\";\n\nconst delay = 1000;\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n  const [difference, setDifference] = useState(0);\n\n  const [subscription, setSubscription] = useState(\"\");\n  const [prevent, setPrevent] = useState(true);\n\n  const onStartHandler = () => {\n    if (!subscription) {\n      const timerSubscription = interval(delay)\n        .pipe(map((v) => v + 1))\n        .subscribe((v) => {\n          setTimer(v + difference);\n        });\n      setSubscription(timerSubscription);\n    } else {\n      subscription.unsubscribe();\n      setTimer(0);\n      setDifference(0);\n      setSubscription(\"\");\n    }\n  };\n\n  const pause = (event) => {\n    if (prevent) {\n      setPrevent(false);\n      const timerInstance = setTimeout(function () {\n        setPrevent(true);\n        clearTimeout(timerInstance);\n      }, 300);\n    } else {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n\n      setDifference(timer);\n      setSubscription(\"\");\n    }\n  };\n\n  const onResetHandler = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n\n    const timerSubscription = interval(delay).subscribe((v) => {\n      setTimer(v);\n    });\n    setSubscription(timerSubscription);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>RxJS Timer</h1>\n      <hr />\n      <StopWatch timePassed={timer ? timer : difference} />\n      <div>\n        <button onClick={onStartHandler} className=\"btn btn-success\">\n          Start/Stop\n        </button>\n        <button \n          onClick={pause} \n          className=\"btn btn-warning\"\n          title={'Use doubleclick to activate'}\n        >\n          Pause\n        </button>\n        <button onClick={onResetHandler} className=\"btn btn-danger\">\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}